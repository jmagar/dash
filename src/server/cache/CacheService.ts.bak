import Redis from 'ioredis';

import { validateConfig } from './config';
import { RedisError, RedisErrorCode, REDIS_ERROR_MESSAGES } from './errors';
import { RedisMetricsCollector, type RedisMetrics } from './metrics';
import type { ICacheService } from './types';
import type { User } from '../../types/auth';
import type { CacheCommand } from '../../types/cache';
import type { LogMetadata } from '../../types/logger';
import type { Container, Stack } from '../../types/models-shared';
import { logger } from '../utils/logger';

export class CacheService implements ICacheService {
  private readonly CACHE_KEYS = {
    SESSION: 'session',
    HOST: 'host',
    DOCKER: {
      CONTAINERS: 'docker:containers',
      STACKS: 'docker:stacks',
    },
    COMMAND: 'command',
  };

  private readonly CACHE_TTL = {
    SESSION: 3600, // 1 hour
    HOST: 300, // 5 minutes
    DOCKER: {
      CONTAINERS: 300, // 5 minutes
      STACKS: 300, // 5 minutes
    },
    COMMAND: 86400, // 24 hours
  };

  private _redis: Redis;
  private isConnected = false;
  private readonly metricsCollector: RedisMetricsCollector;

  constructor() {
    const config = validateConfig();
    this._redis = new Redis({
      host: config.connection.host,
      port: config.connection.port,
      password: config.connection.password,
      db: config.connection.db,
      maxRetriesPerRequest: config.connection.maxRetriesPerRequest,
      retryStrategy: (times: number): number | null => {
        if (times > 10) {
          return null; // Stop retrying after 10 attempts
        }
        const delay = Math.min(times * 1000, 30000);
        return delay;
      },
      enableReadyCheck: true,
      reconnectOnError: (err: Error) => {
        const targetError = 'READONLY';
        if (err.message.includes(targetError)) {
          // Only reconnect when the error contains "READONLY"
          return true;
        }
        return false;
      }
    });

    // Initialize metrics collector
    this.metricsCollector = new RedisMetricsCollector(
      this._redis,
      config.metrics.interval
    );
    this.setupEventHandlers();
  }

  private setupEventHandlers(): void {
    this._redis.on('connect', () => {
      this.isConnected = true;
      logger.info('Redis connected');
    });

    this._redis.on('error', (error) => {
      this.isConnected = false;
      const metadata: LogMetadata = {
        error: error.message,
      };
      logger.error('Redis error:', metadata);
    });

    this._redis.on('ready', () => {
      logger.info('Redis ready');
    });

    this._redis.on('close', () => {
      this.isConnected = false;
      logger.info('Redis connection closed');
    });
  }

  public get redis(): Redis {
    return this._redis;
  }

  public async healthCheck(): Promise<{
    status: string;
    connected: boolean;
    metrics: RedisMetrics;
    error?: string;
  }> {
    try {
      await this._redis.ping();
      return {
        status: 'ok',
        connected: this.isConnected,
        metrics: this.metricsCollector.getMetrics(),
      };
    } catch (error) {
      return {
        status: 'error',
        connected: false,
        metrics: this.metricsCollector.getMetrics(),
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  public async disconnect(): Promise<void> {
    try {
      await this._redis.quit();
      this.isConnected = false;
      logger.info('Redis disconnected');
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to disconnect from Redis:', metadata);
      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  // Session Management
  public async getSession(token: string): Promise<string | null> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      return await this._redis.get(`${this.CACHE_KEYS.SESSION}:${token}`);
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to get session:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async setSession(token: string, user: User, refreshToken: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      const sessionData = JSON.stringify({ user, refreshToken });
      await this._redis.set(
        `${this.CACHE_KEYS.SESSION}:${token}`,
        sessionData,
        'EX',
        this.CACHE_TTL.SESSION
      );
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to set session:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async removeSession(token: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.del(`${this.CACHE_KEYS.SESSION}:${token}`);
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to remove session:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  // Host Management
  public async getHost(id: string): Promise<string | null> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      return await this._redis.get(`${this.CACHE_KEYS.HOST}:${id}`);
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to get host:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async setHost(id: string, data: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.set(
        `${this.CACHE_KEYS.HOST}:${id}`,
        data,
        'EX',
        this.CACHE_TTL.HOST
      );
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to set host:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async removeHost(id: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.del(`${this.CACHE_KEYS.HOST}:${id}`);
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to remove host:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  // Docker Management
  public async getContainers(hostId: string): Promise<Container[] | null> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      const data = await this._redis.get(`${this.CACHE_KEYS.DOCKER.CONTAINERS}:${hostId}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      const metadata: LogMetadata = {
        hostId,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to get containers:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async setContainers(hostId: string, containers: Container[]): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.set(
        `${this.CACHE_KEYS.DOCKER.CONTAINERS}:${hostId}`,
        JSON.stringify(containers),
        'EX',
        this.CACHE_TTL.DOCKER.CONTAINERS
      );
    } catch (error) {
      const metadata: LogMetadata = {
        hostId,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to set containers:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async removeContainers(hostId: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.del(`${this.CACHE_KEYS.DOCKER.CONTAINERS}:${hostId}`);
    } catch (error) {
      const metadata: LogMetadata = {
        hostId,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to remove containers:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async getStacks(hostId: string): Promise<Stack[] | null> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      const data = await this._redis.get(`${this.CACHE_KEYS.DOCKER.STACKS}:${hostId}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      const metadata: LogMetadata = {
        hostId,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to get stacks:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async setStacks(hostId: string, stacks: Stack[]): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.set(
        `${this.CACHE_KEYS.DOCKER.STACKS}:${hostId}`,
        JSON.stringify(stacks),
        'EX',
        this.CACHE_TTL.DOCKER.STACKS
      );
    } catch (error) {
      const metadata: LogMetadata = {
        hostId,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to set stacks:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async removeStacks(hostId: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.del(`${this.CACHE_KEYS.DOCKER.STACKS}:${hostId}`);
    } catch (error) {
      const metadata: LogMetadata = {
        hostId,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to remove stacks:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  // Command Management
  public async getCommand(id: string): Promise<string | null> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      return await this._redis.get(`${this.CACHE_KEYS.COMMAND}:${id}`);
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to get command:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async setCommand(id: string, data: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.set(
        `${this.CACHE_KEYS.COMMAND}:${id}`,
        data,
        'EX',
        this.CACHE_TTL.COMMAND
      );
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to set command:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public async removeCommand(id: string): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.del(`${this.CACHE_KEYS.COMMAND}:${id}`);
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to remove command:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  // Cache Management
  public async clear(): Promise<void> {
    try {
      if (!this.isConnected) {
        throw new RedisError({
          code: RedisErrorCode.CONNECTION_ERROR,
          message: REDIS_ERROR_MESSAGES[RedisErrorCode.CONNECTION_ERROR]
        });
      }

      await this._redis.flushdb();
    } catch (error) {
      const metadata: LogMetadata = {
        error: error instanceof Error ? error.message : 'Unknown error',
      };
      logger.error('Failed to clear cache:', metadata);

      if (error instanceof RedisError) {
        throw error;
      }

      throw new RedisError({
        code: RedisErrorCode.OPERATION_ERROR,
        message: REDIS_ERROR_MESSAGES[RedisErrorCode.OPERATION_ERROR],
        metadata
      });
    }
  }

  public getMetrics(): RedisMetrics {
    return this.metricsCollector.getMetrics();
  }
}

// Export singleton instance
export const cacheService = new CacheService();

version: '3.8'

services:
  app:
    build:
      context: .
      target: app
    ports:
      - "3000:3000"
    environment:
      # Server
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - MAX_REQUEST_SIZE=10485760

      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=shh

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=

      # JWT
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - JWT_EXPIRY=1h
      - JWT_REFRESH_EXPIRY=7d

      # CORS
      - CORS_ORIGIN=http://localhost:3000
      - CORS_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE
      - CORS_ALLOWED_HEADERS=Content-Type,Authorization
      - CORS_EXPOSED_HEADERS=
      - CORS_CREDENTIALS=true
      - CORS_MAX_AGE=86400

      # Rate Limiting
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100

      # Security
      - MAX_FILE_SIZE=52428800
      - ALLOWED_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE
      - ALLOWED_HEADERS=Content-Type,Authorization
      - EXPOSED_HEADERS=
      - CREDENTIALS=true
      - MAX_AGE=86400

      # OpenAI (optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=gpt-4
      - OPENAI_ORG=${OPENAI_ORG:-}
      - OPENAI_MAX_TOKENS=2000
      - OPENAI_TEMPERATURE=0.7

      # OpenRouter (optional)
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - OPENROUTER_MODEL=anthropic/claude-2
      - OPENROUTER_BASE_URL=https://openrouter.ai/api/v1/chat/completions
      - OPENROUTER_MAX_TOKENS=2000
      - OPENROUTER_TEMPERATURE=0.7

      # Logging
      - LOG_LEVEL=info
      - LOG_FILE=/var/log/shh/app.log

      # Gotify (optional)
      - GOTIFY_URL=${GOTIFY_URL:-}
      - GOTIFY_TOKEN=${GOTIFY_TOKEN:-}

      # Prometheus
      - PROMETHEUS_PORT=9090
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.server.json:/app/tsconfig.server.json
      - ./craco.config.js:/app/craco.config.js
      - node_modules:/app/node_modules
      - /mnt/user/appdata/shh/logs:/var/log/shh
    depends_on:
      - postgres
      - redis

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shh-server
    privileged: true
    network_mode: host
    ports:
      - "3000:3000"
      - "1514:1514"
    volumes:
      - /mnt/user/appdata/shh/logs:/var/log/shh
      - /mnt/user/appdata/shh/data:/var/lib/shh
      - /mnt/user/appdata/shh/config:/etc/shh
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/host:ro
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_DIR=/var/log/shh/server
      # Agent configuration
      - SYSLOG_SERVER=localhost:1514
      - SYSLOG_PROTOCOL=tcp
      - SYSLOG_FACILITY=local0
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    container_name: shh-postgres
    environment:
      - POSTGRES_USER=shh
      - POSTGRES_PASSWORD=shh
      - POSTGRES_DB=shh
    volumes:
      - /mnt/user/appdata/shh/data/postgres:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: shh-redis
    volumes:
      - /mnt/user/appdata/shh/data/redis:/data
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

volumes:
  node_modules:
  logs:
  postgres_data:
  redis_data:
  prometheus_data:
